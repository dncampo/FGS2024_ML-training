# WARNING: DO NOT deploy this PoC configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#

services:
  backend-service:
    labels:
      org.fiware: 'fiware-health-poc'
    build:
      context: .
      dockerfile: src/backend/Dockerfile
    image: backend-health:latest
    hostname: backend
    container_name: ${BACKEND_NAME}
    networks:
      - fiware-health-poc
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
        - ml-models:/ml-models
        - type: bind
          source: ${PWD}/conf/mime.types
          target: /usr/local/apache2/conf/mime.types
          read_only: true
        - data-test:/data-test
        - type: bind
          source: ${PWD}/conf/mime.types
          target: /usr/local/apache2/conf/mime.types
          read_only: true
    healthcheck:
      test: curl --fail -s http://${BACKEND_NAME}:${BACKEND_PORT}/health || exit 1
      interval: 5s
      retries: 3


  # Databases
  mongo-db:
    labels:
      org.fiware: 'fiware-health-poc'
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "27018:${MONGO_DB_PORT}" # localhost:27017 // 27018 to avoid conflicts with local MongoDB
    networks:
      - fiware-health-poc
    volumes:
      - mongo-db:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1    
      interval: 5s


  # Orion is an NGSI-v2 context broker
  orion-v2:
    labels:
      org.fiware: 'fiware-health-poc'
    image: quay.io/fiware/orion:${ORION_VERSION}
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    networks:
      - fiware-health-poc
    ports:
      - "${ORION_PORT}:${ORION_PORT}" # localhost:1026
    command: -dbURI mongodb://mongo-db -logLevel DEBUG -noCache
    healthcheck:
      test: curl --fail -s http://orion:${ORION_PORT}/version || exit 1
      interval: 5s

  # Draco is configured to write context data to MySQL
  draco:
    labels:
      org.fiware: 'fiware-health-poc'
    image: quay.io/fiware/draco:${DRACO_VERSION}
    hostname: draco
    container_name: fiware-draco
    depends_on:
      - mysql-db
    networks:
      - fiware-health-poc
    environment:
      - NIFI_WEB_HTTP_PORT=${DRACO_API_PORT}
    expose:
      - "5050"
      - "${DRACO_API_PORT}"
    ports:
      - "${DRACO_API_PORT}:${DRACO_API_PORT}" # localhost:9090
      - "5050:5050"
    healthcheck:
      test: curl --fail -s http://draco:${DRACO_API_PORT}/nifi-api/system-diagnostics || exit 1
      start_period: 1m


  mysql-db:
    env_file:
      - .mysql.env
    platform: linux/amd64
    restart: always
    labels:
      org.fiware: 'fiware-health-poc'
    image: mysql:${MYSQL_DB_VERSION}
    hostname: mysql-db
    container_name: db-mysql
    expose:
      - "${MYSQL_DB_PORT}"
    ports:
      - "${MYSQL_DB_PORT}:${MYSQL_DB_PORT}" # localhost:3306
    networks:
      - fiware-health-poc
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
      - "MYSQL_ROOT_HOST=${MYSQL_ROOT_HOST}"
    volumes:
      - mysql-db:/var/lib/mysql
    healthcheck:
        test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
        timeout: 10s
        retries: 5    


networks:
  fiware-health-poc:
    labels:
      org.fiware: 'fiware-health-poc'
    ipam:
      config:
        - subnet: 173.18.1.0/24

volumes:
  mysql-db: ~
  mongo-db: ~
  mongo-config: ~
  data-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-models
  ml-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/ml-models
  data-test:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-test
