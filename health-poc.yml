# WARNING: DO NOT deploy this PoC configuration directly to a production environment
#
# The tutorial docker-compose files have not been written for production deployment and will not 
# scale. A proper architecture has been sacrificed to keep the narrative focused on the learning 
# goals, they are just used to deploy everything onto a single Docker machine. All FIWARE components 
# are running at full debug and extra ports have been exposed to allow for direct calls to services. 
# They also contain various obvious security flaws - passwords in plain text, no load balancing,
# no use of HTTPS and so on. 
# 
# This is all to avoid the need of multiple machines, generating certificates, encrypting secrets
# and so on, purely so that a single docker-compose file can be read as an example to build on, 
# not use directly. 
# 
# When deploying to a production environment, please refer to the Helm Repository
# for FIWARE Components in order to scale up to a proper architecture:
# 
# see: https://github.com/FIWARE/helm-charts/
#

services:
  # @context file is served from here
  ld-context:
    labels:
      org.fiware: 'fiware-health-poc'
    image: httpd:alpine
    hostname: context
    container_name: fiware-ld-context
    ports:
        - "3004:80"
    volumes:
        - data-models:/usr/local/apache2/htdocs/
        - type: bind
          source: ${PWD}/conf/mime.types
          target: /usr/local/apache2/conf/mime.types
          read_only: true
    healthcheck:
      test: (wget --server-response --spider --quiet  http://ld-context/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}'|  grep -q -e "200") || exit 1

  # Databases
  mongo-db:
    labels:
      org.fiware: 'fiware-health-poc'
    image: mongo:${MONGO_DB_VERSION}
    hostname: mongo-db
    container_name: db-mongo
    expose:
      - "${MONGO_DB_PORT}"
    ports:
      - "27018:${MONGO_DB_PORT}" # localhost:27017 // 27018 to avoid conflicts with local MongoDB
    networks:
      - fiware-health-poc
    volumes:
      - mongo-db:/data/db
      - mongo-config:/data/configdb
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1    
      interval: 5s

  # Orion is the context broker
  orion-ld:
    labels:
      org.fiware: 'fiware-health-poc'
    platform: linux/amd64
    image: quay.io/fiware/orion-ld:${ORION_LD_VERSION}
    hostname: orion
    container_name: fiware-orion-ld
    depends_on:
      - mongo-db
    networks:
      - fiware-health-poc
    ports:
      - ${EXPOSED_PORT:-1026}:${ORION_LD_PORT:-1026} # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG -forwarding -experimental -mongocOnly
    healthcheck:
      test: curl --fail -s http://orion:${ORION_LD_PORT}/version || exit 1
      interval: 5s
      retries: 3

 # Cygnus is configured to write context data to MySQL
  cygnus:
    labels:
      org.fiware: 'fiware-health-poc'
    image: quay.io/fiware/cygnus-ngsi:${CYGNUS_VERSION}
    hostname: cygnus
    container_name: fiware-cygnus
    networks:
      - fiware-health-poc
    depends_on:
      - mysql-db
    expose:
      - "${CYGNUS_MYSQL_SERVICE_PORT}"
      - "${CYGNUS_API_PORT}"
    ports:
      - "${CYGNUS_MYSQL_SERVICE_PORT}:${CYGNUS_MYSQL_SERVICE_PORT}" # localhost:5050
      - "${CYGNUS_API_PORT}:${CYGNUS_API_PORT}" # localhost:5080
    environment:
      - "CYGNUS_MYSQL_SERVICE_PORT=${CYGNUS_MYSQL_SERVICE_PORT}" # Notification Port that Cygnus listens when subcribing to context data changes
      - "CYGNUS_MYSQL_HOST=mysql-db" # Hostname of the MySQL server used to persist historical context data
      - "CYGNUS_MYSQL_PORT=${MYSQL_DB_PORT}" # Port that the MySQL server uses to listen to commands
      - "CYGNUS_MYSQL_USER=root" # Username for the MySQL database user
      - "CYGNUS_MYSQL_PASS=123" # Password for the MySQL database user
      - "CYGNUS_SERVICE_PORT=${CYGNUS_MYSQL_SERVICE_PORT}"
      - "CYGNUS_API_PORT=${CYGNUS_API_PORT}" # Port that Cygnus listens on for operational reasons
      - "CYGNUS_LOG_LEVEL=DEBUG" # The logging level for Cygnus
    healthcheck:
      test: curl --fail -s http://localhost:${CYGNUS_API_PORT}/v1/version || exit 1

  mysql-db:
    env_file:
      - .mysql.env
    platform: linux/amd64
    restart: always
    labels:
      org.fiware: 'tutorial'
    image: mysql:${MYSQL_DB_VERSION}
    hostname: mysql-db
    container_name: db-mysql
    expose:
      - "${MYSQL_DB_PORT}"
    ports:
      - "${MYSQL_DB_PORT}:${MYSQL_DB_PORT}" # localhost:3306
    networks:
      - default
    environment:
      - "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}"
      - "MYSQL_ROOT_HOST=${MYSQL_ROOT_HOST}"
    volumes:
      - mysql-db:/var/lib/mysql
    healthcheck:
        test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
        timeout: 10s
        retries: 5    


networks:
  fiware-health-poc:
    labels:
      org.fiware: 'fiware-health-poc'
    ipam:
      config:
        - subnet: 173.18.1.0/24

volumes:
  mysql-db: ~
  mongo-db: ~
  mongo-config: ~
  data-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-models
